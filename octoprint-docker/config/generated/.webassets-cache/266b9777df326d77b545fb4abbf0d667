V// source: plugin/cura/js/cura.js\u000a$(function() {\u000a    function CuraViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a        self.slicingViewModel = parameters[2];\u000a\u000a        self.pathBroken = ko.observable(false);\u000a        self.pathOk = ko.observable(false);\u000a        self.pathText = ko.observable();\u000a        self.pathHelpVisible = ko.pureComputed(function() {\u000a            return self.pathBroken() || self.pathOk();\u000a        });\u000a\u000a        self.fileName = ko.observable();\u000a\u000a        self.placeholderName = ko.observable();\u000a        self.placeholderDisplayName = ko.observable();\u000a        self.placeholderDescription = ko.observable();\u000a\u000a        self.profileName = ko.observable();\u000a        self.profileDisplayName = ko.observable();\u000a        self.profileDescription = ko.observable();\u000a        self.profileAllowOverwrite = ko.observable(true);\u000a        self.profileMakeDefault = ko.observable(false);\u000a        self.profileFirst = ko.observable(false);\u000a\u000a        // make sure to update form data if any of the metadata changes\u000a        self.profileName.subscribe(function() { self.copyProfileMetadata(); });\u000a        self.profileDisplayName.subscribe(function() {\u000a            if (self.profileDisplayName()) {\u000a                self.placeholderName(self._sanitize(self.profileDisplayName()).toLowerCase());\u000a            }\u000a            self.copyProfileMetadata();\u000a        });\u000a        self.profileDescription.subscribe(function() { self.copyProfileMetadata(); });\u000a        self.profileAllowOverwrite.subscribe(function() { self.copyProfileMetadata(); });\u000a        self.profileMakeDefault.subscribe(function() { self.copyProfileMetadata(); });\u000a\u000a        self.unconfiguredCuraEngine = ko.observable();\u000a        self.unconfiguredSlicingProfile = ko.observable();\u000a\u000a        self.uploadDialog = $("#settings_plugin_cura_import");\u000a        self.uploadElement = $("#settings-cura-import");\u000a        self.uploadData = ko.observable(undefined);\u000a        self.uploadBusy = ko.observable(false);\u000a\u000a        self.uploadEnabled = ko.pureComputed(function() {\u000a            return self.fieldsEnabled();\u000a        });\u000a        self.fieldsEnabled = ko.pureComputed(function() {\u000a            return self.uploadData() && !self.uploadBusy()\u000a                && (self.profileName() || self.placeholderName())\u000a                && (self.profileDisplayName() || self.placeholderDisplayName())\u000a                && (self.profileDescription() || self.placeholderDescription());\u000a        });\u000a\u000a        self.profiles = new ItemListHelper(\u000a            "plugin_cura_profiles",\u000a            {\u000a                "id": function(a, b) {\u000a                    if (a["key"].toLocaleLowerCase() < b["key"].toLocaleLowerCase()) return -1;\u000a                    if (a["key"].toLocaleLowerCase() > b["key"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    var aName = a.name();\u000a                    if (aName === undefined) {\u000a                        aName = "";\u000a                    }\u000a                    var bName = b.name();\u000a                    if (bName === undefined) {\u000a                        bName = "";\u000a                    }\u000a\u000a                    if (aName.toLocaleLowerCase() < bName.toLocaleLowerCase()) return -1;\u000a                    if (aName.toLocaleLowerCase() > bName.toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "id",\u000a            [],\u000a            [],\u000a            5\u000a        );\u000a\u000a        self._sanitize = function(name) {\u000a            return name.replace(/[^a-zA-Z0-9\u005c-_\u005c.\u005c(\u005c) ]/g, "").replace(/ /g, "_");\u000a        };\u000a\u000a        self.performUpload = function() {\u000a            if (self.uploadData()) {\u000a                self.uploadData().submit();\u000a            }\u000a        };\u000a\u000a        self.copyProfileMetadata = function(form) {\u000a            form = form || (self.uploadData() ? self.uploadData().formData : {});\u000a\u000a            if (self.profileName() !== undefined) {\u000a                form["name"] = self.profileName();\u000a            } else if (self.placeholderName() !== undefined) {\u000a                form["name"] = self.placeholderName();\u000a            }\u000a\u000a            if (self.profileDisplayName() !== undefined) {\u000a                form["displayName"] = self.profileDisplayName();\u000a            } else if (self.placeholderDisplayName() !== undefined) {\u000a                form["displayName"] = self.placeholderDisplayName();\u000a            }\u000a\u000a            if (self.profileDescription() !== undefined) {\u000a                form["description"] = self.profileDescription();\u000a            } else if (self.placeholderDescription() !== undefined) {\u000a                form["description"] = self.placeholderDescription();\u000a            }\u000a\u000a            if (self.profileMakeDefault()) {\u000a                form["default"] = true;\u000a            }\u000a\u000a            return form;\u000a        };\u000a\u000a        self.clearUpload = function() {\u000a            self.uploadData(undefined);\u000a            self.fileName(undefined);\u000a            self.placeholderName(undefined);\u000a            self.placeholderDisplayName(undefined);\u000a            self.placeholderDescription(undefined);\u000a            self.profileName(undefined);\u000a            self.profileDisplayName(undefined);\u000a            self.profileDescription(undefined);\u000a            self.profileAllowOverwrite(true);\u000a\u000a            var firstProfile = self.profiles.items().length === 0;\u000a            self.profileMakeDefault(firstProfile);\u000a            self.profileFirst(firstProfile);\u000a        };\u000a\u000a        self.uploadElement.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            headers: OctoPrint.getRequestHeaders(),\u000a            add: function(e, data) {\u000a                if (data.files.length == 0) {\u000a                    // no files? ignore\u000a                    return false;\u000a                }\u000a                if (self.uploadData()) {\u000a                    // data already defined? ignore (should never happen)\u000a                    return false;\u000a                }\u000a\u000a                self.fileName(data.files[0].name);\u000a\u000a                var name = self.fileName().substr(0, self.fileName().lastIndexOf("."));\u000a                self.placeholderName(self._sanitize(name).toLowerCase());\u000a                self.placeholderDisplayName(name);\u000a                self.placeholderDescription("Imported from " + self.fileName() + " on " + formatDate(new Date().getTime() / 1000));\u000a\u000a                var form = {\u000a                    allowOverwrite: self.profileAllowOverwrite()\u000a                };\u000a                data.formData = self.copyProfileMetadata(form);\u000a\u000a                self.uploadData(data);\u000a            },\u000a            submit: function(e, data) {\u000a                self.copyProfileMetadata();\u000a                self.uploadBusy(true);\u000a            },\u000a            done: function(e, data) {\u000a                self.uploadBusy(false);\u000a                self.clearUpload();\u000a\u000a                self.uploadDialog.modal("hide");\u000a                self.requestData();\u000a                self.slicingViewModel.requestData();\u000a            }\u000a        });\u000a\u000a        self.removeProfile = function(data) {\u000a            if (!data.resource) {\u000a                return;\u000a            }\u000a\u000a            self.profiles.removeItem(function(item) {\u000a                return (item.key == data.key);\u000a            });\u000a\u000a            OctoPrint.slicing.deleteProfileForSlicer("cura", data.key, {url: data.resource()})\u000a                .done(function() {\u000a                    self.requestData();\u000a                    self.slicingViewModel.requestData();\u000a                });\u000a        };\u000a\u000a        self.makeProfileDefault = function(data) {\u000a            if (!data.resource) {\u000a                return;\u000a            }\u000a\u000a            _.each(self.profiles.items(), function(item) {\u000a                item.isdefault(false);\u000a            });\u000a            var item = self.profiles.getItem(function(item) {\u000a                return item.key == data.key;\u000a            });\u000a            if (item !== undefined) {\u000a                item.isdefault(true);\u000a            }\u000a\u000a            OctoPrint.slicing.updateProfileForSlicer("cura", data.key, {default: true}, {url: data.resource()})\u000a                .done(function() {\u000a                    self.requestData();\u000a                });\u000a        };\u000a\u000a        self.showImportProfileDialog = function() {\u000a            self.clearUpload();\u000a            self.uploadDialog.modal("show");\u000a        };\u000a\u000a        self.testEnginePath = function() {\u000a            OctoPrint.util.testExecutable(self.settings.plugins.cura.cura_engine())\u000a                .done(function(response) {\u000a                    if (!response.result) {\u000a                        if (!response.exists) {\u000a                            self.pathText(gettext("The path doesn't exist"));\u000a                        } else if (!response.typeok) {\u000a                            self.pathText(gettext("The path is not a file"));\u000a                        } else if (!response.access) {\u000a                            self.pathText(gettext("The path is not an executable"));\u000a                        }\u000a                    } else {\u000a                        self.pathText(gettext("The path is valid"));\u000a                    }\u000a                    self.pathOk(response.result);\u000a                    self.pathBroken(!response.result);\u000a                });\u000a        };\u000a\u000a        self.requestData = function() {\u000a            self.slicingViewModel.requestData();\u000a        };\u000a\u000a        self.fromResponse = function(data) {\u000a            var profiles = [];\u000a            _.each(_.keys(data), function(key) {\u000a                profiles.push({\u000a                    key: key,\u000a                    name: ko.observable(data[key].displayName),\u000a                    description: ko.observable(data[key].description),\u000a                    isdefault: ko.observable(data[key].default),\u000a                    resource: ko.observable(data[key].resource)\u000a                });\u000a            });\u000a            self.profiles.updateItems(profiles);\u000a        };\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.settings = self.settingsViewModel.settings;\u000a        };\u000a\u000a        self.onAllBound = function() {\u000a            self.uploadDialog.on("hidden", function(event) {\u000a                if (event.target.id == "settings_plugin_cura_import") {\u000a                    self.clearUpload();\u000a                }\u000a            });\u000a        };\u000a\u000a        self.onSettingsShown = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onSettingsHidden = function() {\u000a            self.resetPathTest();\u000a        };\u000a\u000a        self.onSlicingData = function(data) {\u000a            if (data && data.hasOwnProperty("cura") && data.cura.hasOwnProperty("profiles")) {\u000a                self.fromResponse(data.cura.profiles);\u000a            }\u000a        };\u000a\u000a        self.resetPathTest = function() {\u000a            self.pathBroken(false);\u000a            self.pathOk(false);\u000a            self.pathText("");\u000a        };\u000a\u000a        self.onWizardDetails = function(response) {\u000a            if (!response.hasOwnProperty("cura") || !response.cura.required) return;\u000a\u000a            if (response.cura.details.hasOwnProperty("engine")) {\u000a                self.unconfiguredCuraEngine(!response.cura.details.engine);\u000a            }\u000a            if (response.cura.details.hasOwnProperty("profile")) {\u000a                self.unconfiguredSlicingProfile(!response.cura.details.profile);\u000a            }\u000a        };\u000a\u000a        self.onWizardFinish = function() {\u000a            self.resetPathTest();\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: CuraViewModel,\u000a        dependencies: ["loginStateViewModel", "settingsViewModel", "slicingViewModel"],\u000a        elements: ["#settings_plugin_cura", "#wizard_plugin_cura"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.